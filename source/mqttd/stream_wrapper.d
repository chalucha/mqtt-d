/**
 * A wrapper around streams, which do not actually implement the `Stream` interface
 *
 * Author:
 * Tomáš Chaloupka <chalucha@gmail.com>
 *
 * License:
 * Boost Software License 1.0 (BSL-1.0)
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy
 * of the software and accompanying documentation covered by this license (the "Software") to use,
 * reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative
 * works of the Software, and to permit third-parties to whom the Software is furnished to do so,
 * all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license
 * grant, this restriction and the following disclaimer, must be included in all copies of the Software,
 * in whole or in part, and all derivative works of the Software, unless such copies or derivative works
 * are solely in the form of machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
 * DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

module mqttd.stream_wrapper;

version (Have_vibe_core) import vibe.core.stream : blocking, IOMode, isStream, Stream;
else
{
	import vibe.core.stream : IOMode, isStream, Stream;

	// workaround for the original vibe-d:core which doesn't have the blocking UDA defined
	// See https://github.com/vibe-d/vibe-core/blob/6ca6dd16d4f89c1a8d3bb89fa58d56cf466d70e6/source/vibe/core/stream.d#L79 for details
	struct blocking {}
}

import vibe.core.net;


/**
 * A wrapper around streams, which do not actually implement the `Stream`
 * interface (e.g. `TCPConnection`).
 */
class StreamWrapper(T) : Stream if (isStream!T)
{
private:
	T _stream;
public:

@safe:
	@disable this();

	this(T stream)
	{
		this._stream = stream;
	}

	@property bool empty() @blocking
	{
		return _stream.empty();
	}

	@property ulong leastSize() @blocking
	{
		return _stream.leastSize();
	}

	@property bool dataAvailableForRead()
	{
		return _stream.dataAvailableForRead();
	}

	const(ubyte)[] peek()
	{
		return _stream.peek();
	}

	size_t read(scope ubyte[] dst, IOMode mode) @blocking
	{
		return _stream.read(dst, mode);
	}

	size_t write(scope const(ubyte)[] bytes, IOMode mode) @blocking
	{
		return _stream.write(bytes, mode);
	}

	void flush() @blocking
	{
		return _stream.flush();
	}

	void finalize() @blocking
	{
		_stream.finalize();
		_stream = T.init; // make sure that we don't hold any reference on wrapped connection
	}
}
